import 'dart:io';

/// Usage:
/// dart run scripts/rename.dart myapp
void main(List<String> args) async {
  if (args.isEmpty) {
    print('‚ùå Usage: dart run scripts/rename.dart <new_project_name>');
    exit(1);
  }

  final newName = args.first.trim();
  final oldName = 'project_name';

  await renameDirsAndFiles(newName, oldName);
}

renameDirsAndFiles(String newName, String oldName) async {
  print('üîÑ Renaming project: $oldName ‚Üí $newName\n');

  // 1. –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–æ–≤
  for (final file in getAllFiles()) {
    try {
      final content = await file.readAsString();
      if (content.contains(oldName)) {
        // print('üîç Found "$oldName" in: ${file.path}');
        final updated = content.replaceAll(oldName, newName);
        await file.writeAsString(updated);
        print('‚úèÔ∏è  Updated text in: ${file.path}');
      }
    } catch (e) {
      print('‚ö†Ô∏è Skipped (cannot read): ${file.path} ($e)');
    }
  }

  // 2. –ü–∞–ø–∫–∏ client/flutter/server
  final dirsToRename = [
    '${oldName}_client',
    '${oldName}_flutter',
    '${oldName}_server',
  ];
  for (final dir in dirsToRename) {
    final d = Directory(dir);
    if (d.existsSync()) {
      final newPath = dir.replaceAll(oldName, newName);
      try {
        d.renameSync(newPath);
        print('üìÅ Renamed directory: $dir ‚Üí $newPath');
      } catch (e) {
        print('‚ö†Ô∏è Could not rename directory $dir ($e)');
      }
    }
  }

  // 3. –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç–∞
  final clientFileOld = '${newName}_client/lib/${oldName}_client.dart';
  final clientFileNew = '${newName}_client/lib/${newName}_client.dart';
  final f = File(clientFileOld);
  if (f.existsSync()) {
    try {
      f.renameSync(clientFileNew);
      print('üìÑ Renamed file: $clientFileOld ‚Üí $clientFileNew');
    } catch (e) {
      print('‚ö†Ô∏è Could not rename file $clientFileOld ($e)');
    }
  }

  final gitignore = File('.gitignore');
  if (gitignore.existsSync()) {
    gitignore.renameSync('.gitignore.template');
    print('‚ö†Ô∏è .gitignore.template may be removed now.');
  }

  print('\n‚úÖ Everything successfully renamed to $newName!');
}

/// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–º–µ–Ω—ã
Iterable<File> getAllFiles() {
  final excludedDirs = [
    '.git',
    '.dart_tool',
    'build',
    'ios',
    'android',
    'windows',
    'macos',
    'linux',
  ];

  final excludedFiles = ['rename_project.dart'];

  final allowedExtensions = [
    '.dart',
    '.yaml',
    '.yml',
    '.json',
    '.md',
    '.gitignore',
    '.gitattributes',
    '.sh',
    '.bat',
    '.txt',
  ];

  return Directory.current
      .listSync(recursive: true)
      .whereType<File>()
      .where(
        (f) =>
            !excludedDirs.any((ex) => f.uri.pathSegments.contains(ex)) &&
            !excludedFiles.any((ex) => f.path.endsWith(ex)) &&
            allowedExtensions.any((ext) => f.path.endsWith(ext)),
      );
}
